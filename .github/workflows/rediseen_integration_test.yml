name: RediseenIntegrationTest
on:
  push:
  schedule:
    - cron:  '0 5 * * *'
  pull_request:
    branches: ['master', 'develop']

jobs:
  build:
    name: IntegrationTest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        redisversion: [latest, 5.0.6, 4.0.14, 3.2.12, 2.8.23]
        goversion: [1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18]

    services:
      redis:
        image: redis:${{ matrix.redisversion }}
        ports:
          - 6379/tcp

    steps:
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.goversion }}
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Integration Test
      env:
        REDISEEN_PORT: 9000
        REDISEEN_KEY_PATTERN_EXPOSED: "^key:[.]*|^KEY:[.]*"
        REDISEEN_KEY_PATTERN_EXPOSE_ALL: false
        REDISEEN_REDIS_URI: redis://:@localhost:${{ job.services.redis.ports['6379'] }}
        REDISEEN_DB_EXPOSED: 0-5
      run: |
        sudo apt-get install redis-tools

        check_by_status_code () {
          # $1: URL to Curl
          # $2: expected status code

          echo Calling: $1
          echo Expecting status code: $2

          RESULT=$(curl -s -o /dev/null -w "%{http_code}" $1)
          echo $RESULT
          if [ "$RESULT" == "$2" ]; then
              echo OK
          else
              echo "You're on fire"
              exit 1
          fi
          echo
        }
        
        check_by_jq_field () {
            # $1: URL to Curl
            # $2: field in the JSON response to check 
            # $3: value expected for the field specified

            echo Calling: $1
            echo Checking Field: $2
            echo Expecting Value: $3

            OUTPUT=$(curl -s $1)
            echo $OUTPUT
            RESULT=$(echo $OUTPUT | jq -r '.'$2)
            if [ "$RESULT" == "$3" ]; then
                echo OK
            else
                echo "You're on fire"
                exit 1
            fi
            echo
        }

        go build -v .

        ./rediseen start -d

        sleep 3

        # Test incorrect usage
        check_by_jq_field http://localhost:9000/wrong_usage/ error "Usage: /info, /info/<info_section>, /metrics, /<db>, /<db>/<key>, /<db>/<key>/<index>, or /<db>/<key>/<field>"
        check_by_status_code http://localhost:9000/wrong_usage/ 400

        # Test index endpoint
        check_by_status_code http://localhost:9000 200

        check_by_jq_field http://localhost:9000/0/key:1/1/1 error "Usage: /info, /info/<info_section>, /metrics, /<db>, /<db>/<key>, /<db>/<key>/<index>, or /<db>/<key>/<field>"
        check_by_jq_field http://localhost:9000/0 count "0"
        check_by_jq_field http://localhost:9000/0 total "0"
        check_by_jq_field http://localhost:9000/0/key:1 error "Key provided does not exist."
        check_by_jq_field http://localhost:9000/0/key:1/1 error "Key provided does not exist."
        check_by_jq_field http://localhost:9000/0/no_access_key error "Key pattern is forbidden from access"
        check_by_jq_field http://localhost:9000/6 error "DB 6 is not exposed"
        check_by_jq_field http://localhost:9000/6/key:1 error "DB 6 is not exposed"

        echo "set key:1 Rediseen" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:1 value "Rediseen"
        check_by_jq_field http://localhost:9000/0/key:1 type "string"
        check_by_jq_field http://localhost:9000/0/key:1/2 value "d"
        check_by_jq_field http://localhost:9000/0/key:1/2 type "string"

        # Redis Key is case-sensitive
        check_by_jq_field http://localhost:9000/0/KEY:1 error "Key provided does not exist."

        echo "hset key:2 year 2019" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "hset key:2 project rediseen" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:2 type "hash"
        check_by_jq_field http://localhost:9000/0/key:2/year type "hash"
        check_by_jq_field http://localhost:9000/0/key:2/year value "2019"
        check_by_jq_field http://localhost:9000/0/key:2/project type "hash"
        check_by_jq_field http://localhost:9000/0/key:2/project value "rediseen"
        
        echo "lpush key:3 github" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "lpush key:3 coding" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "rpush key:3 ENJOY" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:3 type "list"
        check_by_jq_field http://localhost:9000/0/key:3/0 value "coding"
        check_by_jq_field http://localhost:9000/0/key:3/1 value "github"
        check_by_jq_field http://localhost:9000/0/key:3/2 value "ENJOY"

        echo "del key:1" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:1 error "Key provided does not exist."

        echo "del key:2" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:2 error "Key provided does not exist."

        echo "del key:3" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_jq_field http://localhost:9000/0/key:3 error "Key provided does not exist."

        check_by_status_code http://localhost:9000/info 200
        check_by_status_code http://localhost:9000/info/server 200
        check_by_status_code http://localhost:9000/info/clients 200
        check_by_status_code http://localhost:9000/info/memory 200
        check_by_status_code http://localhost:9000/info/cpu 200

        # Redis INFO section is case-insensitive
        check_by_status_code http://localhost:9000/info/SERVER 200
        check_by_status_code http://localhost:9000/info/CLIENTS 200
        check_by_status_code http://localhost:9000/info/MEMORY 200
        check_by_status_code http://localhost:9000/info/CPU 200

        check_by_status_code http://localhost:9000/info/invalidSection 400

        check_by_status_code http://localhost:9000/metrics 200
        
        ./rediseen stop


        export REDISEEN_API_KEY=RandomKey

        ./rediseen start -d

        sleep 3

        check_by_jq_field http://localhost:9000/0 error "unauthorized"
        check_by_jq_field http://localhost:9000/info error "unauthorized"

        check_by_status_code http://localhost:9000/0 401
        check_by_status_code http://localhost:9000/info 401
        check_by_status_code http://localhost:9000/info/server 401
        check_by_status_code http://localhost:9000/metrics 401
        ./rediseen stop

