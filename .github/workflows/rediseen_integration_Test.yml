name: RediseenIntegrationTest
on:
  push:
    branches:
      - '*'
  schedule:
    - cron:  '0 0 * * *'

jobs:
  build:
    name: IntegrationTest
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379/tcp

    steps:
    - name: Set up Go 1.12
      uses: actions/setup-go@v1
      with:
        go-version: 1.12
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Integration Test
      env:
        REDISEEN_PORT: 9000
        REDISEEN_KEY_PATTERN_EXPOSED: "^key:[.]*"
        REDISEEN_KEY_PATTERN_EXPOSE_ALL: false
        REDISEEN_REDIS_URI: redis://:@localhost:${{ job.services.redis.ports['6379'] }}
        REDISEEN_DB_EXPOSED: 0-5
      run: |
        sudo apt-get install redis-tools

        check_by_grep_output () {
            # $1: URL to Curl
            # $2: string expected in the output
            echo Calling: $1
            echo Expecting: $2
            if curl -s $1 | grep "$2"; then
                echo OK
            else
                echo "You're on fire"
                exit 1
            fi
            echo
        }

        go build -v .

        ./rediseen -d start

        check_by_grep_output http://localhost:9000 "Usage: /db, /db/key, /db/key/index, or /db/key/field"
        check_by_grep_output http://localhost:9000/0/key:1/1/1 "Usage: /db, /db/key, /db/key/index, or /db/key/field"
        check_by_grep_output http://localhost:9000/0 "count"
        check_by_grep_output http://localhost:9000/0/key:1 "Key provided does not exist"
        check_by_grep_output http://localhost:9000/0/key:1/1 "Key provided does not exist"
        check_by_grep_output http://localhost:9000/0/no_access_key "Key pattern is forbidden from access"
        check_by_grep_output http://localhost:9000/6 "DB 6 is not exposed"
        check_by_grep_output http://localhost:9000/6/key:1 "DB 6 is not exposed"

        echo "set key:1 Rediseen" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:1 "Rediseen"
        check_by_grep_output http://localhost:9000/0/key:1 "string"
        check_by_grep_output http://localhost:9000/0/key:1/2 "d"

        echo "hset key:2 year 2019" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "hset key:2 project rediseen" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:2 "hash"
        check_by_grep_output http://localhost:9000/0/key:2/year "hash"
        check_by_grep_output http://localhost:9000/0/key:2/year "2019"
        check_by_grep_output http://localhost:9000/0/key:2/project "rediseen"
        
        echo "lpush key:3 github" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "lpush key:3 coding" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        echo "rpush key:3 ENJOY" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:3 "list"
        check_by_grep_output http://localhost:9000/0/key:3/0 "coding"
        check_by_grep_output http://localhost:9000/0/key:3/1 "github"
        check_by_grep_output http://localhost:9000/0/key:3/2 "ENJOY"

        echo "del key:1" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:1 "Key provided does not exist"

        echo "del key:2" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:2 "Key provided does not exist"

        echo "del key:3" | redis-cli -p ${{ job.services.redis.ports['6379'] }}
        check_by_grep_output http://localhost:9000/0/key:3 "Key provided does not exist"
        
        ./rediseen stop    
